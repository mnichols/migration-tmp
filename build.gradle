plugins {
    id 'java'
}

group = 'io.temporal.migration'
version = '1.0-SNAPSHOT'

repositories {
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    mavenCentral()
}

ext {
    javaSDKVersion = '1.22.3'
}
dependencies {
    // These dependencies are used by the application.
    implementation "io.temporal:temporal-sdk:$javaSDKVersion"
    implementation "ch.qos.logback:logback-classic:1.2.11"

    // Use JUnit test framework
    testImplementation "io.temporal:temporal-testing:$javaSDKVersion"
    testImplementation "junit:junit:4.13.2"
    testImplementation "org.mockito:mockito-core:5.1.1"
}

// license {
//     header rootProject.file('license-header.txt')
//     exclude '**/*.json'
//     exclude '**/*.yaml'
//     exclude '**/*.yml'
//     exclude '**/*.html'
// }


test {
    useJUnitPlatform()
}

task execute(type: JavaExec) {
    mainClass = findProperty("mainClass") ?: ""
    classpath = sourceSets.main.runtimeClasspath
}
task setupWorkflows(type: JavaExec) {
    mainClass = 'io.temporal.migration.example.SetupStarter'
    classpath = sourceSets.main.runtimeClasspath
}
task startLegacyWorker(type: JavaExec) {
    mainClass = 'io.temporal.migration.example.LegacyWorker'
    classpath = sourceSets.main.runtimeClasspath
}


task startInterceptingLegacyWorker(type: JavaExec) {
    environment("SUPPORT_MIGRATION", "true")
    environment("SUPPORT_INTERCEPTION","true")
    mainClass = 'io.temporal.migration.example.LegacyWorker'
    classpath = sourceSets.main.runtimeClasspath
}
task startTargetWorker(type: JavaExec) {
    mainClass = 'io.temporal.migration.example.TargetWorker'
    classpath = sourceSets.main.runtimeClasspath
}


